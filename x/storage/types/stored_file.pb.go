// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flstorage/storage/v1/stored_file.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StoredFile defines the StoredFile message.
type StoredFile struct {
	OriginalHash string   `protobuf:"bytes,1,opt,name=original_hash,json=originalHash,proto3" json:"original_hash,omitempty"`
	Tag          string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	ShardHashes  []string `protobuf:"bytes,3,rep,name=shard_hashes,json=shardHashes,proto3" json:"shard_hashes,omitempty"`
	Creator      string   `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *StoredFile) Reset()         { *m = StoredFile{} }
func (m *StoredFile) String() string { return proto.CompactTextString(m) }
func (*StoredFile) ProtoMessage()    {}
func (*StoredFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f24f16386c21cfa, []int{0}
}
func (m *StoredFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredFile.Merge(m, src)
}
func (m *StoredFile) XXX_Size() int {
	return m.Size()
}
func (m *StoredFile) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredFile.DiscardUnknown(m)
}

var xxx_messageInfo_StoredFile proto.InternalMessageInfo

func (m *StoredFile) GetOriginalHash() string {
	if m != nil {
		return m.OriginalHash
	}
	return ""
}

func (m *StoredFile) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *StoredFile) GetShardHashes() []string {
	if m != nil {
		return m.ShardHashes
	}
	return nil
}

func (m *StoredFile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*StoredFile)(nil), "flstorage.storage.v1.StoredFile")
}

func init() {
	proto.RegisterFile("flstorage/storage/v1/stored_file.proto", fileDescriptor_8f24f16386c21cfa)
}

var fileDescriptor_8f24f16386c21cfa = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xcb, 0x29, 0x2e,
	0xc9, 0x2f, 0x4a, 0x4c, 0x4f, 0xd5, 0x87, 0xd1, 0x65, 0x86, 0x60, 0x66, 0x6a, 0x4a, 0x7c, 0x5a,
	0x66, 0x4e, 0xaa, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x90, 0x08, 0x5c, 0x9d, 0x1e, 0x8c, 0x2e,
	0x33, 0x54, 0x6a, 0x60, 0xe4, 0xe2, 0x0a, 0x06, 0xab, 0x75, 0xcb, 0xcc, 0x49, 0x15, 0x52, 0xe6,
	0xe2, 0xcd, 0x2f, 0xca, 0x4c, 0xcf, 0xcc, 0x4b, 0xcc, 0x89, 0xcf, 0x48, 0x2c, 0xce, 0x90, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x81, 0x09, 0x7a, 0x24, 0x16, 0x67, 0x08, 0x09, 0x70, 0x31,
	0x97, 0x24, 0xa6, 0x4b, 0x30, 0x81, 0xa5, 0x40, 0x4c, 0x21, 0x45, 0x2e, 0x9e, 0xe2, 0x8c, 0xc4,
	0xa2, 0x14, 0xb0, 0x9e, 0xd4, 0x62, 0x09, 0x66, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x6e, 0xb0, 0x98,
	0x07, 0x58, 0x48, 0x48, 0x82, 0x8b, 0x3d, 0xb9, 0x28, 0x35, 0xb1, 0x24, 0xbf, 0x48, 0x82, 0x05,
	0xac, 0x11, 0xc6, 0x75, 0x32, 0x3e, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28,
	0x49, 0x84, 0xd7, 0x2a, 0xe0, 0x9e, 0x2b, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xca,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x9d, 0x24, 0x9a, 0xfe, 0x00, 0x00, 0x00,
}

func (m *StoredFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintStoredFile(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShardHashes) > 0 {
		for iNdEx := len(m.ShardHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ShardHashes[iNdEx])
			copy(dAtA[i:], m.ShardHashes[iNdEx])
			i = encodeVarintStoredFile(dAtA, i, uint64(len(m.ShardHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintStoredFile(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OriginalHash) > 0 {
		i -= len(m.OriginalHash)
		copy(dAtA[i:], m.OriginalHash)
		i = encodeVarintStoredFile(dAtA, i, uint64(len(m.OriginalHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredFile(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredFile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginalHash)
	if l > 0 {
		n += 1 + l + sovStoredFile(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovStoredFile(uint64(l))
	}
	if len(m.ShardHashes) > 0 {
		for _, s := range m.ShardHashes {
			l = len(s)
			n += 1 + l + sovStoredFile(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovStoredFile(uint64(l))
	}
	return n
}

func sovStoredFile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredFile(x uint64) (n int) {
	return sovStoredFile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardHashes = append(m.ShardHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredFile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoredFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredFile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredFile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredFile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredFile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredFile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredFile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredFile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredFile = fmt.Errorf("proto: unexpected end of group")
)
