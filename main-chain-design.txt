다음과 같은 블록체인을 설계해서 알려줘. 이 블록체인은 cosmos sdk를 통해 만들어지는 메인체인이야

이 메인체인은 연합학습 기여도 평가 기반 블록체인 시스템이다. 이 시스템은 연구 실험용이며 서비스 배포가 아니라 논문 실험 환경 구축을 목표로 한다. 아래 설명을 충분히 이해하고, 검토해서 단계별로 가이드를 만들어줘. 

메인체인 프로토콜 

1) 노드 유형  
   - L-node(학습 노드): 실제 연합학습의 노드로서 로컬 학습을 수행하고 결과(resnet18, cifar10; 학습결과[weight]=45mb bin파일)를 사이드체인에 제출하고, 메인체인에는 originalhash와 tag를 제출한다.  

   - C-node(위원회): 연합학습의 라운드마다 교체되는 위원회로써, 해당 라운드에 학습을 제출했다고 originalhash와 tag를 제출한 L-node의 제출값 원본을 사이드체인에서 가져와 각 라운드의 학습노드 별 학습결과를 측정해 기여도(점수)를 산출한다. (예를 들어, 지금이 5번 라운드라고 할때, 이번 라운드에 학습을 제출한 학습노드가 10개라면 각 L-node는 모든 C-node의 학습에 대해 기여도를 측정하고 10개의 점수를 메인체인에 제출) 

   - CL-node(위원회 리더): C-node가 계산한 기여도를 최종 집계(평균)하여 다음 라운드 블록에 기록할 결과(ATT)를 만든다. 동시에 해당 라운드 블록생성자의 역할도 맡는다. (여기서 평균을 한다는 소리는 각 L-node가 10개의 학습노드의 점수를 제출하면 각 L-node별로 학습노드의 점수가 다를 수 있으니, 5개의 L-node가 제출한 10개 C-node의 점수의 평균값을 구해서 그 평균값을 해당 C-node의 점수로 한다는 뜻)


2) 블록-라운드 구조
   3블록 = 1라운드
   - Block (3N-2): L-node들이 submit-weight 메시지를 제출 (학습제출-originalhash와 tag)

   - Block (3N-1): C-node들이 submit-score 메시지를 제출 (위원회 노드들이 로컬에서 기여도를 산출하고 결과를 제출. 지금은 실험을 위한 플랫폼임으로 c-node들은 L-node 들이 제출한 학습원본을 가져오는 걸 확인하고, 그 결과 기여도 점수를 70~90점에서 랜덤하게 제출. 대신 각 L-node의 라운드에 따른 점수 편차가 5점 이내로. )
   
   - Block (3N): EndBlocker 실행 → CL-node가 EWMA 기반 기여도 집계 및 CommitAtt 결과를 상태에 저장, 다음 라운드의 CL-node와 C-node를 선출 (c-node = 상위 5명, cl-node = 최상위 1명) 
   각 학습노드의 학습결과 원본을 획득하고 ATT(10개 L-node의 최종 산출된 점수표)를 기반으로 fedavg를 통해 이번 라운드의 글로벌 모델 weight를 생성하고 그 hash를 메인체인에 저장 및 사이드체인에 이번 라운드의 글로벌모델 weight 원본을 사이드체인에 저장 tag는 "ROUND-USERaddr-CHAINID-global"

3) 유의사항
   - 현재 이 프로토콜은 각 블록에서 해야할 작업이 정해져있어. 기본 cosmos sdk 블록체인을 실험용으로 돌리면 블록이 자동으로 계속 늘어나는데, 이를 조정해서 특정 작업(해당 라운드의 서브라운드(각 블록)이 완료되야 다음 블록으로 넘어가게 할 수 있어야한다. 이때, 각 블록의 생성 대기 시간을 5분으로 하면 좋을 것 같다.)

   - 각 라운드에서 선출된 CL-node와 C-node는 위원회 노드야. 블록 생성 및 합의에 이 노드만이 참여해야해. 물론 이를 위해서는 코어를 수정해야해서 작업량이 너무 커질 위험이 있으니, 매 라운드의 CL-node, C-node의 명단을 기록하되 블록 생성만 CL-node가 하게하는 편법이 있을까? 예를 들어 합의 위원회에 CL-node 하나만 넣어서 혼자 합의하게하는 편법이라던지. 

   - 그리고 사이드체인이 메인체인에서 학습결과 원본 획득을 위해 접근하는 주소에 대한 접근제어를 할때 체인은 다른데, 메인체인과 사이드체인에서 같은 주소를 사용할 수 있어? 
